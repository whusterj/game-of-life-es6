var DEFAULT_MATRIX_SIZE     = 0,
      MAX_MATRIX_SIZE         = 100,
      SMALL_MATRIX_SIZE       = MAX_MATRIX_SIZE / 8,
      MEDIUM_MATRIX_SIZE      = MAX_MATRIX_SIZE / 4,
      LARGE_MATRIX_SIZE       = MAX_MATRIX_SIZE / 2,
      EXTRA_LARGE_MATRIX_SIZE = MAX_MATRIX_SIZE;

var MatrixSize = (function () {

  function MatrixSize (width, height) {
    this.width  = width  || DEFAULT_MATRIX_SIZE;
    this.height = height || DEFAULT_MATRIX_SIZE;
  }

  MatrixSize.prototype.double = function () {
    this.width  = _doubleSize(this.width);
    this.height = _doubleSize(this.height);
  };

  MatrixSize.prototype.buildMatrix = function (initValue) {
    var self      = this,
        initValue = initValue;

    var matrix = _.range(this.height).map(function () {
      return _.range(self.width).map(function () {
        return initValue;
      });
    });

    return matrix;
  };

  return MatrixSize;

  ///

  function _doubleSize (size) {
    return Math.min(size * 2, MAX_MATRIX_SIZE);
  }


})();


var MatrixSizeFactory = (function () {

  var exports = {
    random:     _random,
    square:     _square,
    small:      _small,
    medium:     _medium,
    large:      _large,
    extraLarge: _extraLarge
  };

  return exports;

  ///

  function _random (max) {
    return new MatrixSize(_getRandomSize(max),
                          _getRandomSize(max)); 
  }

  function _square (size) {
    return new MatrixSize(size, size);
  }

  function _small () {
    return _square(SMALL_MATRIX_SIZE);
  }

  function _medium () {
    return _square(MEDIUM_MATRIX_SIZE);
  }

  function _large () {
    return _square(LARGE_MATRIX_SIZE);
  }

  function _extraLarge() {
    return _square(EXTRA_LARGE_MATRIX_SIZE);
  }

  function _getRandomSize (max) {
    return randomInt(max || MAX_MATRIX_SIZE);
  }

})();


var MatrixLocation = (function () {

  function MatrixLocation () {
    this.x = null;
    this.y = null;
  }

  MatrixLocation.prototype.random = function (matrixSize) {
    if (isUndefined(matrixSize)) {
      throw new MissingParameter('An instance of MatrixSize must be provided');
    }
    this.x = randomInt(matrixSize.width);
    this.y = randomInt(matrixSize.height);
    return this;
  }

  return MatrixLocation;

})();


var Matrix = (function () {

  var EMPTY_VALUE = null;

  function Matrix (matrixSize) {
    this.matrix;
    this.size = matrixSize;
    this.initMatrix();
  };

  Matrix.prototype.empty = function () {
    this.matrix = this.matrix.map(_emptyRow);
  };

  Matrix.prototype.initMatrix = function () {
    this.matrix = this.size.buildMatrix();
  };

  Matrix.prototype.getRandomLocation = function () {
    return new MatrixLocation().random(this.size);
  }

  Matrix.prototype.contents = function (matrixLoc, item) {
    if (isUndefined(item)) {
      // treat as getter
      return this.matrix[matrixLoc.y][matrixLoc.x];
    }
    
    // treat as setter
    return this.matrix[matrixLoc.y][matrixLoc.x] = item;
  }

  Matrix.prototype.toString = function () {
    var matrixString = '';

    this.matrix.forEach(function (row) {
      row.forEach(function (col) {
        if (isUndefined(col) || isNull(col)) {
          matrixString += ' . ';
        } else {
          matrixString += ' ' + col + ' ';
        }
      });
      matrixString += '\n';
    });

    return matrixString;
  }

  return Matrix;

  ///

  function _emptyRow (row) {
    return row.map(function () {
      return EMPTY_VALUE;
    });
  }

})();


var MatrixFactory = (function () {

  var exports = {
    random:     _random,
    small:      _small,
    medium:     _medium,
    large:      _large,
    extraLarge: _extraLarge
  };

  return exports;

  ///

  function _random (max) {
    return new Matrix(MatrixSizeFactory.random(max));
  }

  function _small () {
    return new Matrix(MatrixSizeFactory.small());
  }

  function _medium () {
    return new Matrix(MatrixSizeFactory.medium());
  }

  function _large () {
    return new Matrix(MatrixSizeFactory.large());
  }

  function _extraLarge () {
    return new Matrix(MatrixSizeFactory.extraLarge());
  }

})();